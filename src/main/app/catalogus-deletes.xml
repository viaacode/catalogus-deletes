<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:context="http://www.springframework.org/schema/context" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd">
    <quartz:connector name="Quartz1" validateConnections="true" doc:name="Quartz"/>
    <db:generic-config name="Mediahaven_monitoring" url="jdbc:postgresql://${mam.db.host}:${mam.db.port}/${mam.db.database}?password=${mam.db.password}&amp;user=${mam.db.username}" driverClassName="org.postgresql.Driver" doc:name="MH monitoring DB"> 
        <reconnect-forever></reconnect-forever>  
    </db:generic-config>
    <db:generic-config name="Catalogus_pro" url="jdbc:postgresql://${catpro.db.host}:${catpro.db.port}/${catpro.db.database}?password=${catpro.db.password}&amp;user=${catpro.db.username}" driverClassName="org.postgresql.Driver" doc:name="MH monitoring DB"> 
        <reconnect-forever></reconnect-forever>  
    </db:generic-config>
    <context:property-placeholder location="${mule.env}.properties"/>
    <flow name="catalogus-deletesFlow">
        <quartz:inbound-endpoint jobName="test" repeatInterval="18000000" startDelay="0" connector-ref="Quartz1" responseTimeout="10000" doc:name="Quartz">
            <quartz:event-generator-job groupName="test" jobGroupName="test"/>
        </quartz:inbound-endpoint>
        <logger message="Start getting all deleted items" level="INFO" doc:name="Logger"/>
        <db:select config-ref="Mediahaven_monitoring" doc:name="Get deleted items">
            <db:parameterized-query><![CDATA[select fragment_id, external_id pid
from sips
where organisation NOT IN ('viaa-archief', 'testbeeld', 'failures') and is_deleted != 0]]></db:parameterized-query>
        </db:select>
        <logger message="Start inserting in bulk into deletes_temp" level="INFO" doc:name="Logger"/>
        <db:insert config-ref="Catalogus_pro" bulkMode="true" doc:name="Bulk insert into deletes_temp">
            <db:parameterized-query><![CDATA[INSERT INTO deletes_temp (
	fragment_id,
   	pid)
VALUES(
	#[payload['fragment_id']],
	#[payload['pid']])]]></db:parameterized-query>
        </db:insert>
        <logger message="Update items that are UNDELETED, but are now DELETED" level="INFO" doc:name="Logger"/>
        <db:update config-ref="Catalogus_pro" doc:name="Update items that are UNDELETED, but are now DELETED">
            <db:parameterized-query><![CDATA[update deletes
set status = 'DELETED'
where status = 'UNDELETED' and fragment_id IN (
	select fragment_id
	from deletes_temp
)]]></db:parameterized-query>
        </db:update>
        <logger message="Insert items that weren't already deleted, but are now DELETED" level="INFO" doc:name="Logger"/>
        <db:insert config-ref="Catalogus_pro" doc:name="Insert items that weren't already deleted, but are now DELETED">
            <db:parameterized-query><![CDATA[insert into deletes (fragment_id, pid, status)
select fragment_id, pid, 'DELETED' status
from deletes_temp
where fragment_id NOT IN (select fragment_id from deletes)]]></db:parameterized-query>
        </db:insert>
        <logger message="Update items that are DELETED to UNDELETED, but now undeleted because not available in the deleted list" level="INFO" doc:name="Logger"/>
        <db:update config-ref="Catalogus_pro" doc:name="Update items that are DELETED to UNDELETED, but now undeleted because not available in the deleted list">
            <db:parameterized-query><![CDATA[update deletes
set status = 'UNDELETED'
where fragment_id NOT IN (
	select fragment_id
	from deletes_temp
)]]></db:parameterized-query>
        </db:update>
        <logger message="Truncate deletes_temp" level="INFO" doc:name="Logger"/>
        <db:execute-ddl config-ref="Catalogus_pro" doc:name="Truncate deletes_temp">
            <db:dynamic-query><![CDATA[TRUNCATE deletes_temp;]]></db:dynamic-query>
        </db:execute-ddl>
        <logger message="Done updating deletes" level="INFO" doc:name="Logger"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <db:execute-ddl config-ref="Catalogus_pro" doc:name="Truncate deletes_temp">
                <db:dynamic-query><![CDATA[TRUNCATE deletes_temp;]]></db:dynamic-query>
            </db:execute-ddl>
        </catch-exception-strategy>
    </flow>
</mule>
